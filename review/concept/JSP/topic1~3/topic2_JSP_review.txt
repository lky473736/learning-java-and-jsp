웹DB프로그래밍 (김형철) topic 2 

- HTTP
	- 기본적으로 클라이언트 - 서버 이용
	- HTML 문서를 전송하기 위한 프로토콜 (HyperText Transfer Protocol)
	- 404 error
		- 클라이언트가(사용자가) 잘못된 요청을 하였을 때 발생
		- https://blog.naver.com/lw_10page/221640822337
	- 500 error
		- 서버 내부 오류 발생
	- 200 error
		- 요청이 성공적으로 수행
		
- 인터넷 기반 서비스
	- 웹서비스만 있는게 아님 (가장 많이 사용하는 것)
	- 이메일, FTP, Telnet, DNS ...
	- 이메일 프로토콜
		- SMTP : 메일 보냄
		- POP3/IMAP : 메일 받음

- 클라이언트-서버 구조
	- 클라이언트 : 웹 서비스를 이용하는 사용자
	- 서버 : 웹 서비스를 제공하는 공급자 
	- 로그인
		- 클라이언트는 id와 pw를 서버에게 보냄 (GET, POST)
			- GET : url에 정보를 적어서 서버에게 보냄 (이때 쿼리스트링 해서 보냄 / 보안 취약, 빠름) -> url 한도 넘으면 못보냄 (4KB)
			- POST : url이 아니라 요청 메세지의 바디를 통해 전송 (보안 좋음 / 느림) 
	- form 필수 속성
		- form에 method 속성으로 지정 가능
		- form에 action 속성으로 서버프로그램주소를 작성 (사용자로부터 입력받은 데이터를 처리할 프로그램)
		- form에 name 속성으로 각 form을 구분하는 거
	
- 정적 웹 vs 동적 웹
	- https://velog.io/@dyunge_100/WEB-%EC%A0%95%EC%A0%81-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%99%80-%EB%8F%99%EC%A0%81-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80
	- 정적 웹 : HTML 문서를 그대로 사용자에게 보여줌
		- 이미 저장된 파일을 클라이언트에게 전송하는 것
		- 그냥 파일만 전송
	- 동적 웹 : 요청에 따라서 그때마다 다른 페이지를 생성해서 전송하는 것 (시간이나 상황에 따라 달라짐)
		- 전송 단계에서의 새로운 변화 : 백엔드
		- 사용자 단계에서의 새로운 변화 : 프론트엔드
		- 동적 웹을 만들기 위해 스크립트 사용 
			- client script : 클라이언트에서 돌아가는 스크립트 (웹브라우저에서 돌아가는 스크립트 / javascript)
			- server script : 서버에서 실행되는 스크립트 (JSP, PHP...)
				- 서버에서 동적으로 무언가를 만들어서 보내줄 때 사용
				
- 예시
	- 프론트엔드 : <html> 2024.09.20. </html>
	- 백엔드 : <html> time.timenow </html>

- 웹 서버를 구축하기 위한 준비물
	- OS, 컴퓨터는 필수
	- 서버에 웹 서비스 프로그램 설치
		- JSP, node.js, django...
		- JSP는 자바를 기반으로 하는 스크립트 언어라고 생각하기

- 서블릿 컨테이너 : 일종의 해석기
	- WAS : 서블릿 컨테이너를 가지는 서버 (웹 어플리케이션을 실행하는 서버)
	- WAS를 설치해야만 JSP를 사용할 수 있는 것임
	- 서블릿 컨테이너 == 아파치 톰캣
	
- chapter 03 pdf에 34페이지 이후가 가장 중요

-------------

topic1에서 정리한 내용을 다시 확인해보자면...

- 인터넷은 TCP/IP를 이용하여 컴퓨터끼리 연결 가능한 네트워크를 의미한다
- 인터넷에서 사용할 수 있는 서비스는 굉장히 많으며, 이 중 가장 많이 사용하는 서비스가 웹인 것이다.
	- 하이퍼링크를 이용하여 다른 문서와 연결 가능한 문서인 HTML을 이용하여 통신한다.
	- HTML을 주고받는 프로토콜이 HTTP인 것이다
- 웹브라우저는 HTML, CSS, Javascript를 해석하는 해석기이다.
- URL은 인터넷에서 자원의 위치를 표현하는 형식이고, HTTP만 있는게 아니라고 했다.
	- 서비스프로토콜://주소:포트/자원명 형식으로 구성된다

HTTP는 HyperText Transfer Protocol이다. 즉, HTML을 서로 주고받을 수 있는 프로토콜이라는 뜻이다. error 번호를 암기해야 하는데, 404는 클라이언트가 잘못된 요청을 하였을 때, 500은 서버 내부 오류, 200은 요청이 잘 되었다는 뜻이다.

인터넷 기반 서비스는 절대로 웹만 있는 것이 아님을 강조한다. 이메일이나 Telnet, SMTP 등 여러 것이 존재한다. 이 중 이메일 프로토콜이 있는데, 이는 아래와 같다.

- SMTP : 이메일을 보내는 프로토콜
- POP3/IMAP : 이메일을 받는 프로토콜

클라이언트-서버 구조는 클라이언트가 요청하면 서버는 그에 맞게 응답하는 구조를 말한다. 즉, 웹서비스를 사용하는 쪽이 클라이언트, 웹서비스를 제공하는 쪽이 서버이다.

이를테면 로그인을 예로 들어보자. 클라이언트는 form 창에 id와 password를 입력하고 전송 버튼을 누른다. 그러면 form 태그에 action에 적힌 경로로 이동되고, 그 경로에 있는 서버 프로그램이 작동할 것이다. 이때 만약 GET을 method로 지정해놓았다면, 쿼리스트링에 정보를 담아서 보내게 되는데 (URL parameter), 빠르기는 하지만 보안에 취약할 것이다. 누가 로그인하는데 비밀번호를 URL창에 다 띄워서 보내겠는가? 

따라서 login할 때 method는 POST가 적합하다. POST는 요청 메세지의 바디를 통해 전송하게 되는데, 보안성이 높다. GET보다는 느리다.

이참에 form에 대한 속성을 정리하자면, method, action, name이 있다. method는 GET이냐, POST냐를 지정하는 것이고 action은 submit 버튼을 누른 후 작동시킬 서버 프로그램의 주소를 의미한다. name이 중요한데, 각 데이터를 구분짓는 이름이다. id를 입력했는데 그게 id인지 pw인지 이름인지 어떻게 알겠는가. 그래서 input:text에 name을 지정해줘서 "여기는 id적는 창"이라고 미리 적어놓는 것이다.

정적 웹과 동적 웹은 생각해보면 매우 쉽다. 그냥 업데이트가 되냐 안되냐의 차이다. 정적 웹은 HTML을 그대로 보여주는데, 이미 저장되어 있는 파일, 즉 앞으로 절대로 변할 일이 없는 파일을 보여주는 것이다. 동적 웹은 요청에 따라서 그때마다 다른 페이지를 생성하여 보여주는 것이다. 네이버 뉴스는 동적 웹이다. 매일마다 올라오는 기사에 따라서 동적으로 웹의 내용물이 변하기 때문이다. 

이때, client script와 server script를 구분하자면, client script는 클라이언트에서 돌아가는 script이다. javascript나 react와 같은 것을 의미한다. 반면 server script는 node.js나 Django와 같은 백엔드 스크립트라고 볼 수 있다. 서버에서 동적으로 무언가를 만들어서 보내줄 때 사용하는 script인 것이다.

웹서버를 구축하기 위해서는 반드시 필요한 것이 OS, 컴퓨터, 그리고 웹 서비스 프로그램이다. JSP, nodejs, django와 같은 걸 말한다.

여기서는 JSP나 servlet을 서블릿 컨테이너로 돌리는데, 여기서 서블릿 컨테이너(톰캣)가 바로 JSP의 웹 서비스 프로그램이 되는 것이다. WAS라고 하는데, WAS는 서블릿 컨테이너를 가지는 서버를 의미한다. 