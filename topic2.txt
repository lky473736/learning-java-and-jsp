JAVA(황희정) topic 2

- 자바란?
	- tiobe index의 결과에서 인기 있는 프로그래밍 언어 조사 -> 자바
	- 특징
		- 객체지향 (OOP) <-> 절차지향
			- 사람이 현실세계에서 이해하는 방식을 프로그래밍 설계에 접목시킴
			- object, class, attribute
				- 세상에 모든 것이 object, object 안에는 attribute가 존재
		- 플랫폼에 독립적 (플랫폼에 종속적이지 않음), 여러 OS와 하드웨어에서 동일히 실행
		- SPA (스프링프레임워크) -> 대규모 시스템 개발
		- 오픈소스 라이브러리 많음 -> 생산성과 유지보수 비용 절감
			- 오픈소스는 라이센스를 잘 봐야함 (공짜는 아님)
		- GUI 기반 응용프로그램 개발에는 적합하지 않고, 간결함이 떨어짐. 불필요 코드 많음
			- java8버전 이후 업데이트를 계속 하면서 최신 프로그래밍언어처럼 간결함, 편리성 반영 중
			- 보통은 backend에서 자바를 많이 씀
			
- 자바 히스토리
	- 자바 탄생 
	- 서블릿, JSP
	- 이클립스
	- 모바일 인터넷 (휴대폰)
	- 안드로이드 (kotlin)
	- spring framework
	- 상용화 (OpenJDK)

- 가상 머신과 JDK 
	- application -> "JVM" (Java Virtual Machine) -> OS -> HW
	- 결국엔 application이 OS를 직접 참조하지 않고 JVM만 참조하게 된다 -> OS에 종속적이지 않다
	- 바이트코드 : 소스코드를 컴파일할 때 .class 형태로 생성. 하드웨어에서 직접 실행하는 기계어가 아닌 JVM에 의해 해석될 수 있는 파일
	- JVM은 C와 C++로 만들어짐 (당연히 OS와 대화해야 하니깐)
	- 가상머신 : .Net, JVM...
	
- JVM 아키텍처
	- 클래스 로더, 런타임 데이터 영역, 실행 엔진으로 구성
	- 클래스 로더 
		- 바이트 코드를 메모리에 로딩함
		- 파일 읽기 -> 초기화 -> 런타임 데이터 영역에 배치
	- 런타임 데이터 영역
		- method, heap, stack 영역으로 구성됨
	- 실행 엔진
		- 실제 프로그램의 실행 담당, 클래스 로더를 통해 런타임 데이터 영역에 배치된 바이트 코드를명령어 단위로 읽어 실행
		- 인터프리터, JIT 컴파일러 방식을 혼용
	- JNI : 자바 언어로 작성된 프로그램이 다른 언어로 작성된 코드 호출
	
